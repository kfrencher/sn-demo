<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function paSPClientController($compile, $element, $scope, $http, $timeout) {
	/* widget controller */
	var c = this;
	
	// Initial message
	c.initialMessageVisible = !Boolean(c.options.widget_id);
	c.initialMessage = c.data.i18n.initialMessage;
	
	// Title
	c.title = '';
	c.showTitle = (c.options.show_title && c.options.show_title !== 'false');
	if (c.options.widget_parameters) {
		var widgetParameters = JSON.parse(c.options.widget_parameters);
		if (typeof widgetParameters.widget_id === 'object')
			c.title = widgetParameters.widget_id.displayValue;
	}
	c.titleDescription = `Burndownrate equals number closed recommendation divided by assigned recommendations. If burnrate is greater than 1 closed was greater than assigned for the period. If less than 1 assigned was greater than opened.`
	
	//PA messages
	if (!top.SNC.PA.msg || $.isEmptyObject(top.SNC.PA.msg)) {
		top.SNC.PA.msg = {};
	}
	
	var httpOptions = {
		url: 'angular.do',
		params: {
			sysparm_type: 'pa_widget',
			type: 'getwidgetserviceportal',
			widget: c.options.widget_id
		}
	};
	$http(httpOptions, true).then(function afterResponse(result) {
		if (!result.data.type || !result.data.sys_id)
			return;
		
		c.initialMessageVisible = false;
		if (c.showTitle)
			c.titleId = result.data.sys_id;
		
		var compiledWidget;
		if (isReactWidget(result.data.type, result.data.newVisualizationEnabled)) {
			// Text Analytics Widget is in React
			c.widgetId = result.data.sys_id;
			c.uuid = result.data.uuid;
			c.reactComponent = true;
			c.lang = c.data.language;
			c.dow = c.data.dow;
			c.cutoffValue = result.data.text_cut_off_value;
			c.cutoffType = result.data.text_cut_off_type;
			c.cutoffCondition = result.data.text_cut_off_condition;
			c.defaultField = result.data.text_default_field;
			c.textLimit = result.data.text_limit;
			c.visualization = result.data.visualization;
			c.textWordsInTrendline = result.data.text_words_in_trendline;
			c.type = result.data.type;
			c.insightsEnabled = result.data.insightsEnabled;
			switch(c.type) {
				case 'text': c.widgetRoute = '/widgets/text-analytics'; break;
				case 'insight': c.widgetRoute = '/widgets/insights'; break;
				case 'time': c.widgetRoute = '/widgets/time-series'; break;
				case 'score': c.widgetRoute = '/widgets/single-score'; break;
				default: c.widgetRoute = '/widgets/text-analytics'; break;
			}
			
			$timeout(function afterAngularRender() {
				var element = angular.element('pa-react-wrapper', $element).get(0);
				window.servicePortalPaUIWidget.render(element);
			});
			$scope.$on('$destroy', function onAngularDestroy() {
				var element = angular.element('pa-react-wrapper', $element).get(0);
				window.servicePortalPaUIWidget.destroy(element);
			});
		} else {
			// Will be removed when we switch all widgets to react
			compiledWidget = $compile('<div class="pa-widget-' + result.data.type + '" widget="' + result.data.sys_id + '"></div>')($scope);
			angular.element('.pa-widget-service-portal', $element).append(compiledWidget);
		}
	});
	
	function isReactWidget(type, newVisualizationEnabled) {
		var reactWidgetTypes = ['text', 'insight'];
		if (newVisualizationEnabled) {
			reactWidgetTypes.push('time');
			reactWidgetTypes.push('score');
		}
 		return reactWidgetTypes.indexOf(type) != -1;
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>pa-react-wrapper {
	height: 750px;
}
h2.title-container {
	font-size: 14px;
	text-overflow: ellipsis;
	overflow: hidden;
	white-space: nowrap;
}
h2.title-container span {
  font-size: 12px;
  width: 500px;
  display: block;
  white-space: pre-wrap;
  font-weight: 400;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>demo_performance_analytics</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Demo Performance Analytics</name>
        <option_schema>[{"displayValue":"Widgets","name":"widget_id","display_value_list":[],"label":"Widget","type":"reference","value":"pa_widgets","ed":{"reference":"pa_widgets"}},{"hint":"","name":"show_title","label":"Show title","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	data.i18n = {
		initialMessage: gs.getMessage('Please select a widget')
	};
	data.language = gs.getSession().getLanguage();
	data.dow = gs.getProperty('glide.ui.date_format.first_day_of_week', 1);
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-10-29 09:46:44</sys_created_on>
        <sys_id>bcd0501e97ba1110b2e1f97e6253af21</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Demo Performance Analytics</sys_name>
        <sys_package display_value="Demo" source="x_53417_demo">785f7e9b97161110fa6733121153afdb</sys_package>
        <sys_policy/>
        <sys_scope display_value="Demo">785f7e9b97161110fa6733121153afdb</sys_scope>
        <sys_update_name>sp_widget_bcd0501e97ba1110b2e1f97e6253af21</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-12 12:07:27</sys_updated_on>
        <template><![CDATA[<div class="pa-widget-service-portal__parent-container">
	<div class="pa-widget-service-portal" role="group">
		<h2 class="title-container"
			id="{{'title-' + c.titleId}}"
			ng-class="{ show: c.showTitle }">
			{{::c.title}}
      <span class="title-description">{{::c.titleDescription}}</span>
		</h2>
		<div class="initial-message-container" ng-class="{ show: c.initialMessageVisible }">
			{{::c.initialMessage}}
		</div>
		<div class="react-component" ng-if="c.reactComponent">
			<pa-react-wrapper
				type="{{::c.widgetRoute}}"
				uuid="{{::c.uuid}}"
				widget-id="{{::c.widgetId}}"
				lang={{::c.lang}}
				dow={{::c.dow}}
				visualization={{::c.visualization}}
				insights-Enabled={{::c.insightsEnabled}}
				text-cutoff-value={{::c.cutoffValue}}
				text-cutoff-type={{::c.cutoffType}}
				text-cutoff-condition={{::c.cutoffCondition}}
				text-limit={{::c.textLimit}}
				text-default-field={{::c.defaultField}}
				text-words-trendline-limit={{::c.textWordsInTrendline}}>
			</pa-react-wrapper>
		</div>
	</div>
</div>
<script>
	top.SNC = top.SNC || {};
	top.SNC.PA = top.SNC.PA || {};
	top.SNC.PA.msg = top.SNC.PA.msg || {};
</script>
]]></template>
    </sp_widget>
</record_update>
