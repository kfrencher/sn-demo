<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_53417_demo.TaskManager</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>TaskManager</name>
        <script><![CDATA[class TaskManagerClass {
    constructor() {
        this.tableName = 'x_53417_demo_task';

        this.STATUS = {
            DRAFT: 'draft',
            NEW: 'new',
            IN_PROGRESS: 'in_progress',
            APPROVED: 'approved'
        };
    }

    /**
     * Deletes all tasks that match the passed in filter. If
     * no filter is provided all tasks in the table are deleted
     * @param {string} [filter] A encoded query
     */
    clearTasks(filter) {
        var task = new GlideRecord(this.tableName);
        if(filter) {
            task.addEncodedQuery(filter);
        }
        task.deleteMultiple();
    }

    /**
     * Generates number of random tasks
     * @param {number} numberOfTasks 
     * @param {string} tag a tag to include in the label of the generated task
     * @returns {GlideRecord[]} list of generated tasks
     */
    createRandomTasks(numberOfTasks, tag) {
        const statusKeys = Object.keys(this.STATUS);
        const statusCount = statusKeys.length;
        const task = new GlideRecord(this.tableName);
        var tasks = [];
        for (let x = 0; x < numberOfTasks; x++) {
            const randomStatusIndex = Math.floor(Math.random() * statusCount);
            const randomStatus = this.STATUS[statusKeys[randomStatusIndex]];
            task.newRecord();
            task.status = randomStatus;
            task.label = `${tag}: ${task.getValue('number')}`;
            task.description = `Description: ${task.getValue('label')}`;
            const openedDate = Utils.randomDateBetween(Utils.toGlideDateTime('2012/01/01'), new GlideDateTime());
            // closed needs to be after opened date
            const closedDate = Utils.randomDateBetween(openedDate, new GlideDateTime());
            task.opened_on = openedDate;
            task.closed_on = closedDate;
            task.update();
            tasks.push(task);
        }
        return tasks;
    }

}

const TaskManager = new TaskManagerClass();]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-10-14 13:19:48</sys_created_on>
        <sys_id>3bb13f1d976ad510b2e1f97e6253afdc</sys_id>
        <sys_name>TaskManager</sys_name>
        <sys_package display_value="Demo" source="x_53417_demo">785f7e9b97161110fa6733121153afdb</sys_package>
        <sys_policy/>
        <sys_scope display_value="Demo">785f7e9b97161110fa6733121153afdb</sys_scope>
        <sys_update_name>sys_script_include_3bb13f1d976ad510b2e1f97e6253afdc</sys_update_name>
    </sys_script_include>
</record_update>
